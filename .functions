trash() {
    if [[ $(uname -s) == "Linux" ]] ; then
        autotrash -d 30 --trash-path=~/.local/share/Trash
    elif [[ $(uname -s) == "Darwin" ]] ; then
        autotrash -d 30 --trash-path=~/.Trash
    else
        echo "Unsupported OS " $(uname -s) >&2
        return 1
    fi

    # TODO Check if this works on OSX as well
    /usr/bin/trash "$@"

}

mkdircd() {
  mkdir -p $1
  cd $1
}

symbol() {
  if ! command -v uni &> /dev/null ; then
    echo "Program `uni` not installed" >&2
    return 1
  fi

  if [[ $(uname -s) == "Linux" ]]; then
    uni -f "%(char)%(wide_padding)     %(name)" print all | tail -n +2 | fzf | awk '{printf $1}' | xclip -sel clip
  elif [[ $(uname -s) == "Darwin" ]]; then
    uni -f "%(char)%(wide_padding)     %(name)" print all | tail -n +2 | fzf | awk '{printf $1}' | pbcopy
  else
  	echo "Unsupported OS $(uname -s)"
	  exit 1
  fi
}

ensure-installed() {
    cmd=$1
    installer=${2:-$1}
    if command -v $cmd &> /dev/null; then
        echo "$cmd already installed"
        return 0
    fi

    if [[ $(uname -s) == "Linux" ]] ; then
        # Install it via apt
        echo "$cmd NOT installed, trying to install via apt..."
        sudo apt install -y $installer
        [ $? -ne 0 ] && return 1

    elif [[ $(uname -s) == "Darwin" ]] ; then
        # Install it via homebrew
        echo "$cmd NOT installed, trying to install via brew..."
        brew install $installer
        [ $? -ne 0 ] && return 1

    else
        echo "Unsupported OS " $(uname -s) >&2
    fi
}

whoruns() {
    name=$1
    a="$(echo $name | head -c 1)"   # get the first character
    b="$(echo $name | tail -c +2)"  # get the remaining characters
    ps aux | grep "[$a]$b"          # do a process search, whichout grep's self
}

# Connect to a remote host and use ZSH as remote TTY
#
# zssh user@host
#
zssh() {
    ssh "$@" -t zsh
}

cmakemake() {
    if [ ! -d build ]; then
        mkdir build
    fi

    cd build
    cmake .. "$@"
    make -j6
    ls && cd ..
}

roshost() {
    if [[ $# -ne 0 ]] ; then
        ## Esimate a "good" IP (one not from a docker tunnel adapter and not localhost)
        IP=${2:-$(ip -o -4 a | grep -v -e "docker" -e "127.0.0.1" | head -n 1 | awk -F'\\s*|/' '{ print $4 }')}
        echo "export ROS_MASTER_URI=http://$1:11311" > ~/.roshost
        echo "export ROS_IP=$IP" >> ~/.roshost
        source ~/.roshost
    fi

    echo "Current ROS Host: $ROS_MASTER_URI"
    echo "Current ROS IP  : $ROS_IP"
    return 0
}

# simple CLI calculator function
# All available functions from NumPY are supported such as
# pi, sin, cos, ..., deg2rad, rad2deg, array(...), dot, etc.
#
# Use like so:
#
# user@pc$ calc 1 + 1
# 2
#
# user@pc$ calc "sin(deg2rad(30))"  # or
# user@pc$ calc sin\(pi \/ 180 \* 30\)  # escape special sh characters
# 0.4999
#
# user@pc$ calc "array([0,1,2]).dot(array([3,4,5]))"
# 14
#
calc() {
    expression=$@
    python3 -c "from numpy import *; print($expression)"
}

rviz() {
   config=${1:-default}
   mkdir -p ~/.rviz/
   if [[ ! -f ~/.rviz/${config}.rviz ]]; then
     cp /opt/ros/$ROS_DISTRO/share/rviz/default.rviz ~/.rviz/${config}.rviz
   fi
   /opt/ros/$ROS_DISTRO/bin/rviz -d ~/.rviz/${config}.rviz
}

roscat () {
    if [[ $? -ne 2 ]]; then
        echo "roscat PKG FILE"
        return 1
    fi
    PKG=$(rospack find $1)
    FILE=$(find $PKG -type f -name $2)
    cat $FILE
}

portscan() {
    if [[ $? -eq 0 ]]; then
        echo "Usage: portscan localhost"
        return 1
    fi
    nmap $@
}

fmq() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h)
        local HOST_="$2"
        shift
        shift
        ;;
      -p)
        local PORT="$2"
        shift
        shift
        ;;
      -f)
        local FILTER="$2"
        shift
        shift
        ;;
      -c)
        local COMPACT="-c"
        shift
        ;;
      vehicles) 
        local TOPIC="fleet/+/+/vehicles"
        shift
        ;;
      vehicle-names)
        shift
        local TOPIC="fleet/+/+/vehicles"
        local FILTER="map(.vehicleId)"
        ;;
      orders)
        local TOPIC="fleet/+/+/orders"
        shift
        ;;
      resources)
        local TOPIC="fleet/+/+/resources"
        shift
        ;;
      notifications)
        local TOPIC="fleet/+/+/notifications"
        shift
        ;;
      missions)
        local TOPIC="fleet/+/+/missions"
        shift
        ;;
      state)
        shift
        local TOPIC="fleet/+/+/$1/state"
        shift
        ;;
      order)
        shift
        local TOPIC="fleet/+/+/$1/order"
        shift
        ;;
      alloc)
        shift
        local TOPIC="fleet/+/+/vehicles"
        local FILTER=".[] | select(.vehicleId == \"$1\") | .allocatedResources | map(.id)"
        shift
        ;;
      actions)
        shift
        local TOPIC="fleet/+/+/$1/instantActions"
        shift
        ;;
      vis)
        shift
        local TOPIC="fleet/+/+/$1/visualization"
        shift
        ;;
      li-order)
        shift
        local TOPIC="li/+/order/state"
        local FILTER="select(.orderId == \"$1\")"
        shift
        ;;
      *)
        echo "Unsupported topic, use either 'vehicles', 'vehicle-names', 'orders', 'resources', 'notificatons', 'missions', 'state', 'order', 'alloc', 'actions' or 'vis'"
        return 1
        ;;
    esac
  done

  if [[ -z $TOPIC ]]; then 
    echo "Usage: fmq [OPTIONS] TOPIC [FILTER]"
    echo ""
    echo "OPTIONS:"
    echo "     -h HOST           - hostname of the MQTT broker (localhost)"
    echo "     -p PORT           - port of the MQTT broker (1883)"
    echo "     -f FILTER         - filter expression passed down to jq (.)"      
    echo "     -c                - print JSON values in compact/oneline form"
    echo "TOPIC:"
    echo "     vehicles          - all currently registered vehicles"
    echo "     vehicles-names    - names of all currently registered vehicles"
    echo "     orders            - all currently orders from the FM"
    echo "     resources         - the active FM map layout"
    echo "     notificatons      - global errors & warning"
    echo "     missions          - UI missions"
    echo "     state <VEHICLE>   - the state of a vehicle with a given name"
    echo "     order <VEHICLE>   - the current order of a vehicle with a given name"
    echo "     alloc <VEHICLE>   - the allocated resources of a vehicle with a given name"
    echo "     actions <VEHICLE> - the currently active instant actions of a vehicle with a given name"
    echo "     vis <VEHICLE>     - the visualzation topic of a vehicle with a given name"
    echo "     li-order <ORDER>  - the state of an LI order with the given ID"
    echo ""
    return 1
  fi

  mqtt sub -h ${HOST_:-localhost} -p ${PORT:-1883} -t $TOPIC | jq $COMPACT "${FILTER:-.}"
}

fob() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    amr)
        local KIND="amrTypes"
        shift
        ;;
    backpack)
        local KIND="backpacks"
        shift
        ;;
    station)
        local KIND="locationTypes"
        shift
        ;;
    carrier)
        local KIND="loadCarrierTypes"
        shift
        ;;
    esac
  done

  if [[ -z $KIND ]]; then 
    echo "Usage: fob KIND"
    echo ""
    echo "KIND:"
    echo "     amr          - vehicle types"
    echo "     backpack     - vehicle backpacks"
    echo "     station      - station types"
    echo "     carrier      - load carrier types"
    return 1
  fi

  local FILTER=".$KIND | .[].arculusId"
  cat ~/fleet/objects/objects.json | jq -r "${FILTER}" | ff
}


li-order() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h)
        local HOST="$2"
        shift
        shift
        ;;
      -p)
        local PORT="$2"
        shift
        shift
        ;;
      -o)
        local ORDER_ID="$2"
        shift
        shift
        ;;
      *)
        local GOAL="$1"
        shift
        ;;
    esac
  done

  if [[ -z $GOAL ]]; then
    echo "Usage: li-order [OPTIONS] GOAL"
    echo ""
    echo "OPTIONS:"
    echo "     -h HOST           - hostname of the MQTT broker (localhost)"
    echo "     -p PORT           - port of the MQTT broker (1883)"
    echo "     -o ORDER_ID       - ID of the order to create (foo)"
    echo "GOAL:   node name of where to drive to"
    return 1
  fi
  local ORDER=${ORDER_ID:-$(petname -a --lists small)}
  # (mqtt sub -h ${HOST:-localhost} -p ${PORT:-1883} -t li/v1.4.0/order/update/+ | jq '.') &
  mqtt pub -q 1 -h ${HOST:-localhost} -p ${PORT:-1883} -t li/v1.4.0/order/create -m "{\"messageId\": 101, \"orderId\": \"${ORDER}\", \"priority\": 0, \"amrType\": \"ArculeeM\", \"timestamp\": $(date +%s) }"
  mqtt pub -q 1 -h ${HOST:-localhost} -p ${PORT:-1883} -t li/v1.4.0/order/update -m "{\"messageId\": 102, \"orderId\": \"${ORDER}\", \"priority\": 0, \"overrideTasks\": true, \"orderComplete\": true, \"tasks\": [{\"tp\": \"DRIVE\", \"taskId\": \"${ORDER}_drive_${GOAL}\", \"location\": \"$GOAL\"}], \"timestamp\": $(date +%s) }"
}
