whatlibs() {
    # needs sudo apt install apt-file
    ldd $1 | awk '/=>/{print $(NF-1)}' | while read n; do dpkg-query -S $n; done | sed 's/^\([^:]\+\):.*$/\1/' | uniq
}

trash() {
    if [[ $(uname -s) == "Linux" ]] ; then
        autotrash -d 30 --trash-path=~/.local/share/Trash
    elif [[ $(uname -s) == "Darwin" ]] ; then
        autotrash -d 30 --trash-path=~/.Trash
    else
        echo "Unsupported OS " $(uname -s) >&2
        return 1
    fi

    # TODO Check if this works on OSX as well
    /usr/bin/trash "$@"

}

mkdircd() {
  mkdir -p $1
  cd $1
}

ensure-installed() {
    cmd=$1
    installer=${2:-$1}
    if command -v $cmd &> /dev/null; then
        echo "$cmd already installed"
        return 0
    fi

    if [[ $(uname -s) == "Linux" ]] ; then
        # Install it via apt
        echo "$cmd NOT installed, trying to install via apt..."
        sudo apt install -y $installer
        [ $? -ne 0 ] && return 1

    elif [[ $(uname -s) == "Darwin" ]] ; then
        # Install it via homebrew
        echo "$cmd NOT installed, trying to install via brew..."
        brew install $installer
        [ $? -ne 0 ] && return 1

    else
        echo "Unsupported OS " $(uname -s) >&2
    fi
}

whoruns() {
    name=$1
    a="$(echo $name | head -c 1)"   # get the first character
    b="$(echo $name | tail -c +2)"  # get the remaining characters
    ps aux | grep "[$a]$b"          # do a process search, whichout grep's self
}

# Connect to a remote host and use ZSH as remote TTY
#
# zssh user@host
#
zssh() {
    ssh "$@" -t zsh
}

cmakemake() {
    if [ ! -d build ]; then
        mkdir build
    fi

    cd build
    cmake .. "$@"
    make -j6
    ls && cd ..
}

rosbridge() {
    PORT=${1:-8888}
    roslaunch rosbridge_server rosbridge_websocket.launch port:=$PORT
}

rosws() {
    if [[ $# -eq 0 ]] ; then
        if [[ ! -f ~/.rosws ]] ; then
            echo "Currently no ROS workspace setup"
            return 0
        fi
        echo "Current ROS workspace: " ~/$(cat ~/.rosws)
        [[ -f ~/$1/devel/setup.zsh ]] && source ~/$1/devel/setup.zsh
        return 0
    fi

    if [[ ! -e ~/$1 ]] ; then
        echo "Could not set $1 as ROS workspace because it does not exist"
        return 1
    fi

    echo $1 > ~/.rosws
    [[ -f ~/$1/devel/setup.zsh ]] && source ~/$1/devel/setup.zsh
    echo "Setting ROS workspace: " ~/$(cat ~/.rosws)
}

roshost() {
    if [[ $# -ne 0 ]] ; then
        ## Esimate a "good" IP (one not from a docker tunnel adapter and not localhost)
        IP=${2:-$(ip -o -4 a | grep -v -e "docker" -e "127.0.0.1" | head -n 1 | awk -F'\\s*|/' '{ print $4 }')}
        echo "export ROS_MASTER_URI=http://$1:11311" > ~/.roshost
        echo "export ROS_IP=$IP" >> ~/.roshost
        source ~/.roshost
    fi

    echo "Current ROS Host: $ROS_MASTER_URI"
    echo "Current ROS IP  : $ROS_IP"
    return 0
}

ros-actionlib-state() {
  if [[ $@ -eq 0 ]]; then
    echo "Usage: ros-actionlib-state N"
    echo ""
    echo "  N:   integer from 0 to 8 to lookup in 'actionlib.CommState'"
    return 1
  fi

  python -c "import actionlib; print [k for k,i in actionlib.CommState.__dict__.iteritems() if i == $1]"
}

# simple CLI calculator function
# All available functions from NumPY are supported such as
# pi, sin, cos, ..., deg2rad, rad2deg, array(...), dot, etc.
#
# Use like so:
#
# user@pc$ calc 1 + 1
# 2
#
# user@pc$ calc "sin(deg2rad(30))"  # or
# user@pc$ calc sin\(pi \/ 180 \* 30\)  # escape special sh characters
# 0.4999
#
# user@pc$ calc "array([0,1,2]).dot(array([3,4,5]))"
# 14
#
calc() {
    expression=$@
    python -c "from numpy import *; print($expression)"
}

rviz() {
   config=${1:-default}
   /opt/ros/$ROS_DISTRO/bin/rviz -d ~/.rviz/"$config".rviz
}

roscat () {
    if [[ $? -ne 2 ]]; then
        echo "roscat PKG FILE"
        return 1
    fi
    PKG=$(rospack find $1)
    FILE=$(find $PKG -type f -name $2)
    cat $FILE
}
